name: Teamcity Test

on: push

jobs:
  test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.6

      - name: Install ifconfig
        run: sudo apt-get update && sudo apt-get install -y net-tools

      - name: Set up host environment variable
        run: |
          echo "HOST=$(ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1)" >> $GITHUB_ENV

#      - name: Create directory and copy JSON file
#        run: |
#          mkdir config
#          echo $(pwd)/config/
#          cp $(pwd)/infra/browsers.json $(pwd)/config/
#          ls


      - name: Set up host config property
        run: |
         echo "host=$HOST:8111" >> src/main/resources/config.properties
         echo "remote=http://$HOST:4444/wd/hub" >> src/main/resources/config.properties


      - name: Set up teamcity server
        run: |
          docker run -u 0 -d --name teamcity-server \
          -v $(pwd)/tmp/teamcity_server/datadir:/data/teamcity_server/datadir \
          -v $(pwd)/logs:/opt/teamcity/logs \
          -p 8111:8111 jetbrains/teamcity-server:2024.03

      - name: Pull Selenoid images
        run: |
          docker pull selenoid/vnc_chrome:91.0
          docker pull selenoid/vnc:firefox_89.0 
          docker pull selenoid/vnc_opera:76.0
          docker pull aerokube/selenoid:latest-release

      - name: make directory
        run: |
          echo "CURRENT=$(pwd | sed -e 's/U/u/g' | sed -e 's/V/v/g' | sed -e 's/A/a/g' | sed -e 's/P/p/g')" >> $GITHUB_ENV
          mkdir config
          echo $(pwd)
          ls

      - name: Copy file
        run: |
          cp $(pwd)/infra/browsers.json $(pwd)/config/
          ls

      - name: Set up Selenoid server
        run: docker run -d --name selenoid -p 4444:4444 -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd)/config/:/etc/selenoid/ aerokube/selenoid:latest-release

#      - name: Run Selenoid UI
#        run: |
#          docker run -d --name selenoid-ui -p 8080:8080 aerokube/selenoid-ui --selenoid-uri http://$HOST:4444

      - name: Set up teamcity server tests
        run: mvn clean test -Dtest=SetupTest#startUpTest

      - name: Set up superUserToken environment variable
        run: |
         echo "SUPER_USER_TOKEN=$(docker logs teamcity-server | grep 'Super user authentication token' | tail -n 1 | awk '{print $6}')" >> $GITHUB_ENV
         echo $SUPER_USER_TOKEN

      - name: Set up superUserToken config property
        run: |
         echo "superUserToken=$SUPER_USER_TOKEN" >> src/main/resources/config.properties
         echo $superUserToken

      - name: Run TeamCity agent
        run: |
          docker run -e SERVER_URL=http://$HOST:8111 -u 0 -d --name teamcity-agent -v $(pwd)/tmp/teamcity_agent/conf:/data/teamcity_agent/conf jetbrains/teamcity-agent:2024.03

      - name: Set up teamcity Agent tests
        run: mvn clean test -Dtest=AutirizeAgentTest#autorizeAgentTest

      - name: Run API tests
        run: mvn clean test -DsuiteXmlFile="testng-suites/api-suite.xml"

      - name: Run UI tests
        run: mvn test -DsuiteXmlFile="testng-suites/ui-suite.xml"

      - name: Load test report history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: ./allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

      - name: Run Swagger coverage
        if: always()
        run: |
          wget https://github.com/viclovsky/swagger-coverage/releases/download/1.5.0/swagger-coverage-1.5.0.zip
          unzip swagger-coverage-1.5.0.zip
          .swagger-coverage-commandline/bin/swagger-coverage-commandline -s http://$HOST:8111/app/rest/swagger.json -i target/swagger-coverage-output

      - name: Save Swagger coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
         name: swagger-coverage
         path: |
           swagger-coverage-report.html
           swagger-coverage-results.json